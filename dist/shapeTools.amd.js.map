{"version":3,"file":"shapeTools.amd.js","sources":["../src/positionFinder.module.js"],"sourcesContent":["import * as THREE from \"../node_modules/three/build/three.module.js\";\n\nconst positionFinder = {\n\n    maths: {\n        distanceTo: function( v1, v2 ) {\n\n            return Math.sqrt( this.distanceToSquared( v1, v2 ) );\n            \n        },\n            \n        distanceToSquared: function( v1, v2 ) {\n            \n            const dx = v1.x - v2.x;\n            const dy = v1.y - v2.y;\n            \n            return dx * dx + dy * dy;\n            \n        },\n         // Stupid lack of operator overloading, this looks so dumb\n        closestToSegment: function (p, la, lb) {\n            let point = new THREE.Vector2( p.x, p.y );\n            let a     = new THREE.Vector2( la.x, la.y );\n            let b     = new THREE.Vector2( lb.x, lb.y );\n\n            let ba = b.clone().sub(a);\n            let t = point.clone().sub(a).dot(ba) / ba.lengthSq();\n\n            let res = a.clone().lerp(b, Math.min(Math.max(t, 0), 1));\n            return this.distanceTo( res, p);\n        },\n\n        intersectionWalls : function ( a1, e1, a2, e2 ) {\n  \n            let b1 = new THREE.Vector2().copy(e1);\n            b1.sub( a1 );\n\n            let b2 = new THREE.Vector2().copy(e2);\n            b2.sub( a2 );\n\n            let s1 = a1.x * b1.y - a1.y * b1.x ;\n            let s2 = a2.x * b1.y - a2.y * b1.x ;\n            let d  = b2.x * b1.y - b2.y * b1.x ;  // determinant\n            let mu = (s1-s2) / d;\n\n            let schnittPunkt = new THREE.Vector2().copy( b2 ).multiplyScalar( mu ).add( a2 );\n            console.log(\"schnittPunkt: \", schnittPunkt );\n\n            return schnittPunkt;\n        },\n\n        inside: function(point, vs) {\n            // https://stackoverflow.com/questions/22521982/check-if-point-is-inside-a-polygon\n            // ray-casting algorithm based on\n            // https://wrf.ecse.rpi.edu/Research/Short_Notes/pnpoly.html/pnpoly.html\n            \n            let x = point.x, y = point.y;\n            \n            let inside = false;\n            for (let i = 0, j = vs.length - 1; i < vs.length; j = i++) {\n                let xi = vs[i].x, yi = vs[i].y;\n                let xj = vs[j].x, yj = vs[j].y;\n                \n                let intersect = ((yi > y) != (yj > y))\n                    && (x < (xj - xi) * (y - yi) / (yj - yi) + xi);\n                if (intersect) inside = !inside;\n            }\n            \n            return inside;\n        }\n    },\n\n    getMeasures: function( points ){\n        let xMin = 100000;\n        let xMax = -10000;\n    \n        let yMin = 100000;\n        let yMax = -10000;\n    \n        points.forEach( function( point ){\n        xMin = Math.min( xMin, point.x );\n        yMin = Math.min( yMin, point.y );\n        xMax = Math.max( xMax, point.x );\n        yMax = Math.max( yMax, point.y );\n        });\n    \n        let width  = xMax - xMin;\n        let height = yMax - yMin;\n        let center = new THREE.Vector2( height/2 + yMin, width/2 + xMin  );\n\n    \n        return { width, height, xMin, xMax, yMin, yMax, center };\n    },\n\n    findLightPositions3: function( ecken ){\n\n        let measures = this.getMeasures( ecken );\n        let scope = this;\n\n        \n        let height = measures.height;\n        let width  = measures.width;\n        \n        let grid = { x: 10, y: 10 };\n        let radius= 300;\n\n        let stepX = width/grid.x;\n        let stepY = height/grid.y;\n        let distance;\n\n        let lightPos     = new THREE.Vector2( 0, 0 );\n\n        \n\n        let occupancy = 1;\n        let maxOccupancy = 0;\n\n        let positions = [], intenitys = [];\n        let results = [];\n\n        let findEdges = function( edges, res, callback ){\n           \n            let rest = [];\n            let used = [];\n\n            let lastUsed = [];\n            let notUsed  = [];\n\n\n            for ( let i = 0; i < stepX; i++ ){\n        \n                lightPos.x = 0 + i*grid.x;\n            \n                for( let j = 0; j < stepY; j++ ){\n                    \n                    lightPos.y = 0 + j*grid.y;\n            \n                    edges.forEach( function( edge, index ){\n                        \n                        distance = lightPos.distanceTo( edge );\n\n                        if ( distance > radius ){ // if edge distance bigger than radius\n                            rest.push( index );\n                            occupancy =  1 - ( rest.length / edges.length );\n                        } else{\n                            used.push( index );\n                        }\n                    });\n\n                    if (  occupancy >= maxOccupancy ){\n                        maxOccupancy = occupancy;\n                        notUsed = rest;\n                        lastUsed = used;\n                        \n                    }\n            \n                    rest = [];\n                    used = [];\n                    occupancy = 1;\n                \n                }\n            \n            \n            }\n\n            res.push( lastUsed );\n\n            if ( notUsed.length > 2 ){\n                findEdges( notUsed, res, callback );\n            } else {\n                callback( res );\n                return res;\n            }\n        }\n\n        let afterwork = function( rects ){\n            let bbox =[];\n            rects.forEach( function( indexes ){\n                if ( indexes.length === 1 || indexes.length === 2 ){ // if only two edges take naighbour edge\n\n                    if ( indexes[0] === 0 ){\n                        indexes.push( _.last( indexes ) + 1 ); \n                    } else {\n                        // search for smallest distance naighbour\n                        indexes.unshift( indexes[0] - 1 ); \n                    }\n                } \n\n                let measures = scope.getMeasures( scope.filterArray( ecken, indexes ) );\n\n            });\n            //console.log(\"rectse\", rects);\n\n           \n        };\n\n        let rects = findEdges( ecken, results, afterwork );\n        \n        return rects;\n       // return  { x:300, y:300 };\n\n       // this.debugPos( new THREE.Vector3( bestPosition.x, 200, bestPosition.y) )\n\n    },\n\n    filterArray: function( base, indexes ){\n        return indexes.map( function ( index ) {\n            return base[index];\n        });\n    },\n\n    getCenters: function( ecken, rects ){\n       // console.log( \"base \", ecken, rects);\n\n        let scope = this;\n        let centers = [];\n\n        rects.forEach( function( rect ){\n            \n            let measures = scope.getMeasures( scope.filterArray( ecken, rect) );\n            centers.push( measures.center );\n        });\n\n        return centers;\n    },\n\n    minimumDistPoint: function( room ){\n\n        let measures = this.getMeasures( room );\n\n        let height = measures.height;\n        let width  = measures.width;\n        \n        let gridX = 10;\n        let gridY = 10;\n        \n        let stepX = width/gridX;\n        let stepY = height/gridY;\n        let lPos  = { x: 0, y: 0 };\n        let totalDist = 0;\n        let totalDistMin = 100000;\n        let bestPosition = { x: 0, y:0 };\n        let dist;\n        let dist2;\n\n        let totalDist2 = 0;\n        let totalDistMin2 = 100000;\n        \n        for ( let i = 0; i < stepX; i++ ){\n        \n            lPos.x = 0 + i*gridX;\n            \n            for( let j = 0; j < stepY; j++ ){\n            \n                totalDist = 0;\n                totalDist2 = 0;\n                lPos.y = 0 + j*gridY;\n            \n            for( let z = 0; z < room.length ; z++ ){\n            \n                dist = this.maths.distanceTo( lPos, room[z] );\n                totalDist += dist;\n                            \n                if ( z === room.length - 1 ){\n                    dist2 = this.maths.closestToSegment( lPos, room[z], room[0] );\n                } else {\n                    dist2 = this.maths.closestToSegment( lPos, room[z], room[z+1] );\n                }\n                if ( dist2 < 150 ) dist2 = 1000;\n                totalDist2 += dist2;\n            \n         }\n        \n        \n             if ( totalDist2 < totalDistMin2 ){\n        \n                 bestPosition.x = lPos.x;\n                 bestPosition.y = lPos.y;\n        \n                 totalDistMin2 = totalDist2;\n        \n         }\n        \n        }\n        \n        }\n       // console.log(\"best Pos: \", bestPosition);\n        return bestPosition;\n    },\n\n    minimumDistPointEdges: function( room ){\n\n        let measures = this.getMeasures( room );\n\n        let height = measures.height;\n        let width  = measures.width;\n        \n        let gridX = 10;\n        let gridY = 10;\n        \n        let stepX = width/gridX;\n        let stepY = height/gridY;\n        let lPos  = { x: 0, y: 0 };\n        let totalDist = 0;\n        let totalDistMin = 100000;\n        let bestPosition = { x: 0, y:0 };\n        let dist;\n        let dist2;\n        let inside = true;\n        \n        for ( let i = 0; i < stepX; i++ ){\n        \n        lPos.x = 0 + i*gridX;\n        \n        for( let j = 0; j < stepY; j++ ){\n        \n         totalDist = 0;\n         lPos.y = 0 + j*gridY;\n        \n         for( let z = 0; z < room.length ; z++ ){\n        \n            dist = this.maths.distanceTo( lPos, room[z] );\n            \n            if ( z === room.length - 1 ){\n                dist2 = this.maths.closestToSegment( lPos, room[z], room[0] );\n            } else {\n                dist2 = this.maths.closestToSegment( lPos, room[z], room[z+1] );\n            }\n            inside = this.maths.inside( lPos, room ); \n\n            \n            if ( dist2 < 100 || !inside ) dist += 2000;\n            \n            \n            totalDist += dist;\n         }\n        \n             if ( totalDist < totalDistMin ){\n                 bestPosition.x = lPos.x;\n                 bestPosition.y = lPos.y;\n        \n                 totalDistMin = totalDist;\n        \n         }\n        \n        }\n        \n        }\n       // console.log(\"best Pos: \", bestPosition);\n        return bestPosition;\n    },\n\n    fillCircles: function( room ){\n\n        let measures = this.getMeasures( room );\n\n        let height = measures.height;\n        let width  = measures.width;\n        \n        let gridX = 10;\n        let gridY = 10;\n        \n        let stepX = width/gridX;\n        let stepY = height/gridY;\n        let lPos  = { x: 0, y: 0 };\n        \n        let smallestSide = 10000;\n        let dist2;\n        let circles = [];\n        let inside = true;\n        \n        for ( let i = 0; i < stepX; i++ ){\n        \n        lPos.x = measures.xMin + i*gridX;\n        \n            for( let j = 0; j < stepY; j++ ){\n                smallestSide = 10000;\n                lPos.y = measures.yMin + j*gridY;\n                inside = this.maths.inside( lPos, room ); \n\n                if ( !inside ) continue;\n                \n                for( let z = 0; z < room.length ; z++ ){\n                    \n                    if ( z === room.length - 1 ){\n                        dist2 = this.maths.closestToSegment( { x:lPos.x, y:lPos.y }, room[z], room[0] );\n                    } else {\n                        dist2 = this.maths.closestToSegment( { x:lPos.x, y:lPos.y }, room[z], room[z+1] );\n                    }\n\n                    if ( dist2 < smallestSide ){\n                        smallestSide = dist2;\n                    }\n                \n                }\n                \n                if ( smallestSide > 40 ){\n                    circles.push( { position: { x:lPos.x, y:lPos.y }, radius: smallestSide})\n\n                }\n                \n            \n            }\n        }\n\n        // return circles;\n         return this.find2circles( circles, measures );\n    },\n\n    find2circles: function( circles, measures ){\n\n        let roomDiagonale = Math.sqrt( measures.width*measures.width + measures.height*measures.height );\n        circles.sort((a, b) => parseFloat(b.radius) - parseFloat(a.radius));\n        let dist = 0;\n        let list = [];\n        let biggest = circles[ 0 ];\n        list.push( biggest );\n\n        if ( roomDiagonale/1.5 > biggest.radius*2 ){\n            for( let i = 1; i< circles.length; i++ ){\n                dist = this.maths.distanceTo( biggest.position, circles[i].position );\n    \n                if ( dist >= biggest.radius + circles[i].radius ){\n                    list.push( circles[i] );\n                    break;\n                }\n            }\n        }\n\n        \n        console.log(\"circles: \", list, roomDiagonale, biggest.radius);\n\n        return list;\n    }\n\n}\n\nexport default positionFinder;\n"],"names":["THREE.Vector2"],"mappings":"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"}