{"version":3,"file":"shapeTools.amd.js","sources":["../src/positionFinder.module.js"],"sourcesContent":["// all units are in cm\n\nconst defaults = {\n    grid: {\n        x: 10,\n        y: 10\n    },\n    allowedLights: 6,\n    minRadius: 40,\n    showOutside: true,\n    checkConstraints: false,\n    showAll: false,\n    lightRoomRatio: 0.9\n};\n\nconst positionFinder = function( opts ){\n    this.options = Object.assign( {}, defaults, opts ); \n    console.log(\"PositionFinder Options: \", this.options );\n};\n\npositionFinder.prototype = Object.assign({ \n\n    constructor: positionFinder,\n\n    maths: {\n        distanceTo: function( v1, v2 ) {\n\n            return Math.sqrt( this.distanceToSquared( v1, v2 ) );\n            \n        },\n            \n        distanceToSquared: function( v1, v2 ) {\n            \n            const dx = v1.x - v2.x;\n            const dy = v1.y - v2.y;\n            \n            return dx * dx + dy * dy;\n            \n        },\n\n        clone: function ( v ) {\n            return { x: v.x, y: v.y }  \n        },\n\n        lerp: function ( v1, v2, alpha ) {\n            \n            v1.x += ( v2.x - v1.x ) * alpha ;\n            v1.y += ( v2.y - v1.y ) * alpha ;\n            return v1;\n\n        },\n\n        lengthSq: function (v) {\n            return v.x * v.x + v.y * v.y;\n        },\n\n        dot: function( v1, v2 ){\n            return v1.x * v2.x + v1.y * v2.y;\n        },\n\n        sub: function ( v1, v2 ) {\n            \n            v1.x = v1.x - v2.x ;\n            v1.y = v1.y - v2.y ;\n\n            return v1;\n\n        },\n\n        closestToSegment: function (p, la, lb) {\n            let point = this.clone( p );\n            let a     = this.clone( la );\n            let b     = this.clone( lb );\n\n            let ba = this.sub( this.clone( b ), a );\n            let t = this.dot( this.sub( point, a ), ba ) / this.lengthSq( ba );\n\n            let res = this.lerp( a, b, Math.min(Math.max(t, 0), 1));\n            return this.distanceTo( res, p);\n        },\n\n        inside: function(point, vs) {\n            // https://stackoverflow.com/questions/22521982/check-if-point-is-inside-a-polygon\n            // ray-casting algorithm based on\n            // https://wrf.ecse.rpi.edu/Research/Short_Notes/pnpoly.html/pnpoly.html\n            \n            let x = point.x, y = point.y;\n            \n            let inside = false;\n            for (let i = 0, j = vs.length - 1; i < vs.length; j = i++) {\n                let xi = vs[i].x, yi = vs[i].y;\n                let xj = vs[j].x, yj = vs[j].y;\n                \n                let intersect = ((yi > y) != (yj > y))\n                    && (x < (xj - xi) * (y - yi) / (yj - yi) + xi);\n                if (intersect) inside = !inside;\n            }\n            \n            return inside;\n        }\n    },\n    getMeasures: function( points ){\n        let xMin = 100000;\n        let xMax = -10000;\n    \n        let yMin = 100000;\n        let yMax = -10000;\n    \n        points.forEach( function( point ){\n        xMin = Math.min( xMin, point.x );\n        yMin = Math.min( yMin, point.y );\n        xMax = Math.max( xMax, point.x );\n        yMax = Math.max( yMax, point.y );\n        });\n    \n        let width  = xMax - xMin;\n        let height = yMax - yMin;\n        let center = { x: height/2 + yMin, y: width/2 + xMin  };\n\n    \n        return { width, height, xMin, xMax, yMin, yMax, center };\n    },\n\n    fillCircles: function( room, constraints ){\n\n        let measures = this.getMeasures( room );\n        let opts = this.options;\n\n        let height = measures.height;\n        let width  = measures.width;\n        \n        let stepX = width / opts.grid.x;\n        let stepY = height / opts.grid.y;\n        let lPos  = { x: 0, y: 0 };\n        \n        let smallestSide = 10000;\n        let dist2;\n        let circles = [];\n        let inside = true;\n        \n        for ( let i = 0; i < stepX; i++ ){\n        \n        lPos.x = measures.xMin + i*opts.grid.x;\n        \n            for( let j = 0; j < stepY; j++ ){\n                smallestSide = 10000;\n                lPos.y = measures.yMin + j*opts.grid.y;\n                \n                if ( !opts.showOutside ){\n                    inside = this.maths.inside( lPos, room ); \n                    if ( !inside ) continue;\n                }\n                \n                // check room\n                for( let z = 0; z < room.length ; z++ ){\n                    \n                    if ( z === room.length - 1 ){\n                        dist2 = this.maths.closestToSegment( { x:lPos.x, y:lPos.y }, room[z], room[0] );\n                    } else {\n                        dist2 = this.maths.closestToSegment( { x:lPos.x, y:lPos.y }, room[z], room[z+1] );\n                    }\n\n                    if ( dist2 < smallestSide ){\n                        smallestSide = dist2;\n                    }\n                \n                }\n\n\n                // check constraints\n                if ( opts.checkConstraints ){\n                    constraints.forEach( (constraint) => {\n                        for( let z2 = 0; z2 < constraint.length ; z2++ ){\n                        \n                            if ( z2 === constraint.length - 1) break;\n        \n                            dist2 = this.maths.closestToSegment( { x:lPos.x, y:lPos.y }, constraint[z2], constraint[z2+1] );\n                    \n        \n                            if ( dist2 < smallestSide ){\n                                smallestSide = dist2;\n                            }\n                        \n                        }\n                    });\n                }\n                \n                if ( smallestSide > opts.minRadius ){\n                    circles.push( { position: { x:lPos.x, y:lPos.y }, radius: smallestSide})\n\n                }\n                \n            \n            }\n        }\n\n         if ( opts.showAll ) return circles;\n         return this.findCandidates( circles, measures );\n    },\n\n    getLightRatio: function( measures, lights ){\n        let roomDiagonale = Math.sqrt( measures.width*measures.width + measures.height*measures.height );\n        let radiusSam = lights.map( item => item.radius ).reduce((prev, next) => prev + next);\n\n        let ratio =  radiusSam*2 / roomDiagonale ; // maybe something better?\n        // console.log(\"lights ratio: \", ratio );\n        return ratio;\n    },\n\n    sortByRadius: function( candidates ){\n        return candidates.sort((a, b) => parseFloat(b.radius) - parseFloat(a.radius));\n    },\n\n    findCandidates: function( circles, measures ){\n\n        let lights = this.sortByRadius( circles );\n        let opts = this.options;\n        let candidates = [];\n        let lightRatio = 0;\n\n        for( let i = 1; i< lights.length; i++ ){\n\n            if ( opts.allowedLights < 1 ) return;\n\n            if ( candidates.length === 0 ){\n                lightRatio = this.getLightRatio( measures, [ lights[i] ] );\n                if ( lightRatio >= opts.lightRoomRatio ) continue;\n\n                candidates.push( lights[i] ); // first and biggest\n                continue;\n            } \n\n            lightRatio = this.getLightRatio( measures, candidates );\n\n            if ( lightRatio >= opts.lightRoomRatio || candidates.length ===  opts.allowedLights ) break;\n\n            if ( this.checkDistanceToAll( candidates, lights[i] ) ) candidates.push( lights[i]);\n\n        }\n\n        //console.log(\"cand: \", candidates);\n        return candidates;\n    },\n    checkDistanceToAll: function( candidates, light ){\n        \n        let dist = 0;\n        \n        for ( let j = 0; j < candidates.length; j++ ){\n                \n            dist = this.maths.distanceTo( candidates[j].position, light.position );\n\n            if ( dist < candidates[j].radius + light.radius ) return false;\n        }\n        return  true;\n    } \n});\n\n\nexport default positionFinder;\n"],"names":[],"mappings":"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"}